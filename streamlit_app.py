
# ______________________________________________________________________________________________________
# Import des biblioth√®ques
# ______________________________________________________________________________________________________

import streamlit as st
import pandas as pd
import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier 
from sklearn.preprocessing import LabelEncoder, MinMaxScaler

# ______________________________________________________________________________________________________
# Configuration du site
# ______________________________________________________________________________________________________

st.set_page_config(page_title="JAD'Up",  layout='wide', page_icon='https://raw.githubusercontent.com/amelievert/streamlit-example/master/Agence%20de%20Marketing.ico')

st.sidebar.title("Sommaire")
st.sidebar.image('https://raw.githubusercontent.com/amelievert/streamlit-example/master/Agence%20de%20Marketing.ico')

pages = ["Introduction au jeu de donn√©es",
         "Analyse",
         "Preprocessing",
         "Challenge de mod√®les",
         "Pour aller plus loin"]

page = st.sidebar.radio("Aller vers", pages) 


# ______________________________________________________________________________________________________
# Import du jeu de donn√©es
# ______________________________________________________________________________________________________

df = pd.read_csv('bank.csv', sep = ',')
#https://github.com/amelievert/streamlit-example/blob/862f21e357b88331e8f0d63567a5e76d95b6958c/bank.csv

# ______________________________________________________________________________________________________
# Pr√©paration des jeux de donn√©es √† utiliser
# ______________________________________________________________________________________________________

df2 = df.copy()

# Creation de tranches d'√¢ges
df2['t_age'] = pd.cut(x = df2['age'], bins = [17, 30, 40, 50, 65, 96], labels = ['18-30', '30-40','40-50', '50-65','65-95'])

# Creation de tranches de solde compte bancaire = balance
df2['t_balance'] = pd.qcut(x=df2["balance"], q=4, labels=[1,2,3,4])

# Creation de tranches de dur√©e de contact = duration
df2['t_duration'] = pd.qcut(df2["duration"], q=4, labels=[1,2,3,4])

# Creation de tranches de dur√©e de contact = duration
df2['t_duration'] = pd.qcut(df2["duration"], q=4, labels=[1,2,3,4])

# Creation de tranches de nombre de contact = campaign > Corrige le probl√®me de valeurs abb√©rantes et limite √† 4 contacts
df2['t_campaign'] = pd.cut(x = df2['campaign'], bins = [0, 1, 2, 3, 99], labels = [1, 2, 3, 4])

# Cr√©ation d'une cat√©gorie pour contact campagne pr√©c√©dente oui/non
df2['contact_last_campaign'] = np.where(df2['pdays']>=0, 'yes', 'no')

# Cr√©ation de tranches en fonction du d√©lai √©coul√©
df2['t_pdays'] = pd.cut(x = df2['pdays'], bins = [-2, 0, 200, 999], labels = ['NON CONTACTE', 'MOINS DE 200J', 'PLUS DE 200J'])

# Creation de tranches de nombre de contact avant la campagne
df2['previous'] = pd.cut(x = df2['previous'], bins = [0, 1, 2, 3, 99], labels = [1, 2, 3, 4])

# Suppression des colonnes dummies"√©es"
drop_cols=['age','balance','duration','campaign','pdays','previous']
df2 = df2.drop(drop_cols, axis=1)

# Cr√©ation de dummies
var=['marital','education','poutcome','contact','t_age','t_balance','t_duration','t_campaign','t_pdays','month']
df2= df2.join(pd.get_dummies(df2[var], prefix=var))
df2 = df2.drop(df2[var], axis=1)

# Transformation en num√©rique
le = LabelEncoder()
df2['job2']= le.fit_transform(df2['job'])
df2 = df2.drop(['job'], axis=1)

# Remplace yes/no par 1/0
var = ["default", "housing","loan","deposit","contact_last_campaign"]
df2[var] = df2[var].replace(('yes', 'no'), (1, 0))


# ______________________________________________________________________________________________________
# 1/ Introduction au jeu de donn√©es
# ______________________________________________________________________________________________________

if page==pages[0]: 

  st.title("Description du jeu de donn√©es")

  st.write("Ce jeu de donn√©es est compos√© de donn√©es personnelles sur des clients d‚Äôune banque qui ont √©t√© ‚Äút√©l√©market√©s‚Äù pour souscrire √† un produit que l‚Äôon appelle un 'd√©p√¥t √† terme'.")
  st.write("Lorsqu‚Äôun client souscrit √† ce produit, il place une quantit√© d‚Äôargent dans un compte sp√©cifique et ne pourra pas toucher ces fonds avant l‚Äôexpiration du terme.")
  st.write("En √©change, le client re√ßoit des int√©r√™ts de la part de la banque √† la fin du terme.")
  st.write("Le jeu de donn√©es est t√©l√©chargeable au lien suivant: ")
  st.write("https://www.kaggle.com/janiobachmann/bank-marketing-dataset")


# ---------- Les chiffres cl√©s -----------

  st.header("Les chiffres cl√©s :")
  col1, col2, col3, col4, col5 = st.columns(5)
  col1.write('')
  col2.metric("Nombre de clients", "11 162")
  col3.metric("Nombre de features", "17")
  col4.metric("Proportion des cibles", "47%")
  col5.write('')

# ---------- les variables  -----------

  st.header("Description des variables :")

  var = pd.DataFrame({"Nom des variables": ["age","job","marital","education","default","balance","housing","loan","contact","day","month","duration","campaign","pdays","previous","poutcome","deposit"],
    "Description": ["Age du client","Profession","Statut marital","Niveau d'√©tudes","D√©faut de paiement","Solde du compte","Pr√™t immo","Pr√™t perso",
    "Type de contact","Dernier jour de contact","Dernier mois de  contact","Dur√©e du contact (secondes)","Nombre de contacts","Nb jours √©coul√©s depuis le dernier contact","Nb de contacts",
    "R√©sultat de la campagne pr√©c√©dente","R√©sultat de la campagne en cours"]
    })

  st.write(var)

# ---------- Aper√ßu -----------

  st.header("Aper√ßu du jeu de donn√©es :")
  st.write(df)

# ---------- Ce qu'il faut comprendre -----------

  st.header("Ce qu'il faut retenir :")
  st.write("On remarque que certaines variables sont la r√©sultante de la campagne en cours : ")
  st.write("* contact")
  st.write("* day")
  st.write("* month")
  st.write("* duration")
  st.write("* campaign")
  st.write("La variable [deposit] est notre variable cible.")
  st.write("47% des clients ont r√©pondu favorablement √† la campagne (deposit=yes)")

         
# ______________________________________________________________________________________________________
# 2/ Analyse du jeu de donn√©es
# ______________________________________________________________________________________________________

if page==pages[1]: 

  st.title("Analyse du jeu de donn√©es")

# ---------- Fonction de description -----------

  def describe_df(df):
      """
      Fonction am√©lior√©e de description des colonnes, elle permet d'identifier :
      le type de la colonne , le nb de valeur vide (nan), le nb de valeurs uniques, le pourcentage de r√©partition des valeurs
      INPUT : le dataframe
      OUTPUT : tableau d'analyse
      """
      res = pd.DataFrame(index=["Name","Type", "Nan", "Unique","Min","Max","Values","Pourcentage"])
      for col in df.columns:
          df_col = df[col]
          res[col] = [
              df_col.name,
              df_col.dtype,
              df_col.isnull().sum(),
              len(df_col.unique()),
              df_col.min(),
              df_col.max(),
              df_col.unique(),
              (df_col.value_counts(ascending=False, normalize=True) * 100)
                  .apply(int)
                  .to_json(),
          ]
      return res.T

# ---------- Affichage de la description d√©taill√©e -----------

  st.header("Description d√©taill√©e des variables")
  st.dataframe(describe_df(df).astype(str))


# ---------- Les correlations -----------

  st.header("Analyse des corr√©lations")
  tab1, tab2, tab3 = st.tabs(["‚ñ© Matrice", "üìà Chart", "ÔºÖ Coefficients"])
         
# Matrice de correlation

  col1, col2 = tab1.columns(2)

  le = LabelEncoder()
  df2=df.copy()
  for col in df2.columns:
    df2[col]= le.fit_transform(df2[col])
  
  tab1.subheader("Matrice de corr√©lation")
  fig = plt.figure(figsize=(20,15))
  sns.heatmap(df2.corr(), annot=True, cmap='RdBu_r', center=0)
  col1.pyplot(fig)
  col2.write('')

# Corr√©lations directes

  col3, col4 = tab2.columns(2)

  tab2.subheader("Graphiques des corr√©lations directes")
  corr=pd.DataFrame(df2.corr()["deposit"])
  corr=corr.sort_values("deposit",ascending=False, key=abs)
  fig = plt.figure(figsize=(20,15))
  sns.barplot(data=corr, y=corr.index, x="deposit")
  col3.pyplot(fig)
  col4.write('')

# Corr√©lations coefficients

  tab3.subheader("Coefficients de corr√©lation avec la variable cible")
  coef=df2.corr()["deposit"]
  tab3.write(coef)

# ---------- Les distributions par type de variables -----------

  st.subheader("Les distributions par type de variables")
         
  col1, col2 = st.columns(2)
  df2 = df.copy()
  numerics = df2.select_dtypes(include=['int16', 'int32', 'int64', 'float16', 'float32', 'float64']).columns
  categoricals= df2.select_dtypes(include=['object','category']).columns

# variables num√©riques

  tab1, tab2 = col1.tabs(["üìà Chart", "üóÉ Describe"])

  option = tab1.selectbox("Choix une variable num√©rique :",numerics)
  hist = px.histogram(df2,x=option,color="deposit",barmode="group")
  tab1.plotly_chart(hist)
         
  describe= df2[numerics].describe().transpose()
  tab2.write(describe)

  if option=="age":
    col1.write("Les √¢ges extr√™mes semblent avoir une plus forte adh√©rence avec la campagne.")
  elif option=="balance":
    col1.write("RAS")
  elif option=="day":
    col1.write("RAS")
  elif option=="duration":
    col1.write("On remarque que plus la dur√©e de contact augmente et plus les clients semblent souscrire √† la campagne.")
  elif option=="campaign":
    col1.write("RAS")
  elif option=="pdays":
    col1.write("RAS")
  elif option=="previous":
    col1.write("RAS")

  st.header("Observations")
  st.write("On remarque que 8 324 clients n'ont pas √©t√© contact√©s lors de la campagne pr√©c√©dente.")
  st.write("Lorsque PREVIOUS = 0 alors PDAYS = -1")

# variables cat√©gorielles

  tab3, tab4 = col2.tabs(["üìà Chart", "üóÉ Describe"])

  option = tab3.selectbox("Choix une variable :", categoricals)
  hist = px.histogram(df2,x=option,color="deposit")
  tab3.plotly_chart(hist)
         
  describe= df2[categoricals].describe().transpose()
  tab4.write(describe)

         
